/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BookinglayoutImport } from './routes/booking/__layout'

// Create Virtual Routes

const BookingImport = createFileRoute('/booking')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const PostsIndexLazyImport = createFileRoute('/posts/')()
const BookingIndexLazyImport = createFileRoute('/booking/')()
const BookingHelloLazyImport = createFileRoute('/booking/hello')()

// Create/Update Routes

const BookingRoute = BookingImport.update({
  id: '/booking',
  path: '/booking',
  getParentRoute: () => rootRoute,
} as any)

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostsIndexLazyRoute = PostsIndexLazyImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/index.lazy').then((d) => d.Route))

const BookingIndexLazyRoute = BookingIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BookingRoute,
} as any).lazy(() => import('./routes/booking/index.lazy').then((d) => d.Route))

const BookingHelloLazyRoute = BookingHelloLazyImport.update({
  id: '/hello',
  path: '/hello',
  getParentRoute: () => BookingRoute,
} as any).lazy(() => import('./routes/booking/hello.lazy').then((d) => d.Route))

const BookinglayoutRoute = BookinglayoutImport.update({
  id: '/__layout',
  getParentRoute: () => BookingRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/booking': {
      id: '/booking'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookingImport
      parentRoute: typeof rootRoute
    }
    '/booking/__layout': {
      id: '/booking/__layout'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookinglayoutImport
      parentRoute: typeof BookingRoute
    }
    '/booking/hello': {
      id: '/booking/hello'
      path: '/hello'
      fullPath: '/booking/hello'
      preLoaderRoute: typeof BookingHelloLazyImport
      parentRoute: typeof BookingImport
    }
    '/booking/': {
      id: '/booking/'
      path: '/'
      fullPath: '/booking/'
      preLoaderRoute: typeof BookingIndexLazyImport
      parentRoute: typeof BookingImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface BookingRouteChildren {
  BookinglayoutRoute: typeof BookinglayoutRoute
  BookingHelloLazyRoute: typeof BookingHelloLazyRoute
  BookingIndexLazyRoute: typeof BookingIndexLazyRoute
}

const BookingRouteChildren: BookingRouteChildren = {
  BookinglayoutRoute: BookinglayoutRoute,
  BookingHelloLazyRoute: BookingHelloLazyRoute,
  BookingIndexLazyRoute: BookingIndexLazyRoute,
}

const BookingRouteWithChildren =
  BookingRoute._addFileChildren(BookingRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/booking': typeof BookinglayoutRoute
  '/booking/hello': typeof BookingHelloLazyRoute
  '/booking/': typeof BookingIndexLazyRoute
  '/posts': typeof PostsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/booking': typeof BookingIndexLazyRoute
  '/booking/hello': typeof BookingHelloLazyRoute
  '/posts': typeof PostsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/booking': typeof BookingRouteWithChildren
  '/booking/__layout': typeof BookinglayoutRoute
  '/booking/hello': typeof BookingHelloLazyRoute
  '/booking/': typeof BookingIndexLazyRoute
  '/posts/': typeof PostsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/booking'
    | '/booking/hello'
    | '/booking/'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/booking' | '/booking/hello' | '/posts'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/booking'
    | '/booking/__layout'
    | '/booking/hello'
    | '/booking/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  BookingRoute: typeof BookingRouteWithChildren
  PostsIndexLazyRoute: typeof PostsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  BookingRoute: BookingRouteWithChildren,
  PostsIndexLazyRoute: PostsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/booking",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/booking": {
      "filePath": "booking",
      "children": [
        "/booking/__layout",
        "/booking/hello",
        "/booking/"
      ]
    },
    "/booking/__layout": {
      "filePath": "booking/__layout.tsx",
      "parent": "/booking"
    },
    "/booking/hello": {
      "filePath": "booking/hello.lazy.tsx",
      "parent": "/booking"
    },
    "/booking/": {
      "filePath": "booking/index.lazy.tsx",
      "parent": "/booking"
    },
    "/posts/": {
      "filePath": "posts/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
